{"version":3,"sources":["logo.svg","lib/productServices.js","reducers/messages.js","reducers/product.js","Components/ProductForm.js","Components/ProductList.js","Components/Message.js","Components/Footer.js","App.js","serviceWorker.js","store.js","index.js"],"names":["module","exports","__webpack_require__","p","baseUrl","showMessage","msg","type","payload","initState","products","PRODUCT_ADD","PRODUCT_LOAD","PRODUCT_REPLACE","PRODUCT_REMOVE","getVisibleProducts","filter","t","isActive","ProductForm","handleSubmit","evt","preventDefault","_this","props","saveProduct","target","productName","value","price","uom","dateCreated","handleInputChange","setState","Object","defineProperty","name","react_default","a","createElement","onSubmit","this","className","onChange","Component","connect","state","product","dispatch","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","res","json","createProduct","ProductList","updateProductDetails","id","console","log","fetchProducts","_this2","scope","map","key","toggleProduct","checked","onClick","deleteProduct","ownProps","loadProducts","getState","find","concat","updateProduct","objectSpread","destroyProduct","removeProduct","message","_ref","Footer","react_router_dom","to","App","src","logo","alt","Components_Message","Components_ProductForm","react_router","path","render","match","Components_ProductList","params","Boolean","window","location","hostname","reducer","combineReducers","arguments","length","undefined","action","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d3ef123.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const baseUrl = 'https://5d479f42992ea9001444c91f.mockapi.io/products'\r\n// const baseUrl = 'http://localhost:8080/products'\r\n//REACT_APP_BASE_URL=https://fahrandeen.github.io/myapp0107/products\r\n//\"homepage\": \"https://fahrandeen.github.io/myapp0107\",\r\n  \r\n\r\n\r\nexport const getProducts = () => {\r\n    return fetch(baseUrl)\r\n    .then(res => res.json())\r\n}\r\n\r\nexport const createProduct = (productName, price, uom, dateCreated) => {\r\n    return fetch(baseUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({productName: productName, price: price, uom: uom, dateCreated: dateCreated,isActive: false})\r\n    })\r\n    .then(res => res.json())\r\n}\r\n\r\nexport const updateProduct = (product) => {\r\n    return fetch(`${baseUrl}/${product.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(product)\r\n    })\r\n    .then(res => res.json())\r\n}\r\n\r\nexport const destroyProduct = (id) => {\r\n    return fetch(`${baseUrl}/${id}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\n","import {PRODUCT_ADD, PRODUCT_LOAD, PRODUCT_REPLACE, PRODUCT_REMOVE} from './product'\r\n\r\nconst MESSAGE_SHOW = 'MESSAGE_SHOW'\r\n\r\nexport const showMessage = (msg) => ({type:MESSAGE_SHOW, payload:msg})\r\n\r\nexport default function(state='', action){\r\n    switch (action.type) {\r\n        case MESSAGE_SHOW:\r\n            return action.payload\r\n        case PRODUCT_ADD:\r\n        case PRODUCT_LOAD:\r\n        case PRODUCT_REPLACE:\r\n        case PRODUCT_REMOVE:            \r\n            return ''\r\n        default:\r\n            return state\r\n    }\r\n}","import { getProducts, createProduct, updateProduct, destroyProduct } from '../lib/productServices'\r\nimport { showMessage } from './messages'\r\n\r\nconst initState = {\r\n    products: []\r\n}\r\n\r\nexport const PRODUCT_ADD = 'PRODUCT_ADD'\r\nexport const PRODUCT_LOAD = 'PRODUCT_LOAD'\r\nexport const PRODUCT_REPLACE = 'PRODUCT_REPLACE'\r\nexport const PRODUCT_REMOVE = 'PRODUCT_REMOVE'\r\n\r\nexport const loadProducts = (products) => ({ type: PRODUCT_LOAD, payload: products })\r\nexport const addProduct = (product) => ({ type: PRODUCT_ADD, payload: product })\r\nexport const replaceProduct = (product) => ({ type: PRODUCT_REPLACE, payload: product })\r\nexport const removeProduct = (id) => ({ type: PRODUCT_REMOVE, payload: id })\r\n\r\nexport const fetchProducts = () => {\r\n    return (dispatch) => {\r\n        dispatch(showMessage('Loading Products...'))\r\n        getProducts()\r\n            .then(products => dispatch(loadProducts(products)))\r\n    }\r\n}\r\n\r\nexport const saveProduct = (productName, price, uom, dateCreated) => {\r\n    return (dispatch) => {\r\n        dispatch(showMessage('Saving Product'))\r\n        createProduct(productName, price, uom, dateCreated)\r\n            .then(res => dispatch(addProduct(res)))\r\n    }\r\n}\r\n\r\nexport const toggleProduct = (id) => {\r\n    return (dispatch, getState) => {\r\n        dispatch(showMessage('Saving product update'))\r\n        const { products } = getState().product\r\n        const product = products.find(t => t.id === id)\r\n        const toggled = { ...product, isActive: !product.isActive }\r\n        updateProduct(toggled)\r\n            .then(res => dispatch(replaceProduct(res)))\r\n    }\r\n}\r\n\r\nexport const deleteProduct = (id) => {\r\n    // console.log(id)\r\n    return (dispatch) => {\r\n        dispatch(showMessage('Product Deleting'))\r\n        destroyProduct(id)\r\n            .then(() => dispatch(removeProduct(id)))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getVisibleProducts = (products, filter) => {\r\n    switch (filter) {\r\n        case 'active':\r\n            return products.filter(t => !t.isActive)\r\n        case 'completed':\r\n            return products.filter(t => t.isActive)\r\n        default:\r\n            return products\r\n    }\r\n}\r\n\r\nexport default (state = initState, action) => {\r\n    switch (action.type) {\r\n        case PRODUCT_ADD:\r\n            return { ...state, products: state.products.concat(action.payload) }\r\n        case 'CURRENT_UPDATE':\r\n            return { ...state, productName: action.payload }\r\n        case PRODUCT_LOAD:\r\n            return { ...state, products: action.payload }\r\n        case PRODUCT_REPLACE:\r\n            return {...state, products: state.products\r\n                .map(t => t.id === action.payload.id ? action.payload : t)\r\n            }\r\n        case PRODUCT_REMOVE:\r\n            return { ...state, products: state.products\r\n                .filter(t => t.id !== action.payload) }\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { saveProduct } from '../reducers/product'\r\n\r\n\r\nclass ProductForm extends Component {\r\n    handleSubmit = (evt) => {\r\n        evt.preventDefault()\r\n        this.props.saveProduct(evt.target.productName.value, evt.target.price.value, evt.target.uom.value, evt.target.dateCreated.value)\r\n        \r\n    }\r\n\r\n    handleInputChange = (evt) => {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className=\"form-row\">\r\n                    <div className=\"col-sm-6 sm-3\">\r\n                        <label>Product Name</label>\r\n                        <input type=\"text\"\r\n                            name=\"productName\"\r\n                            className=\"form-control\"\r\n                            onChange={this.props.handleInputChange}\r\n                            value={this.props.productName} />\r\n                    </div>\r\n                    <div className=\"col-sm-2 sm-2\">\r\n                        <label>Price</label>\r\n                        <input type=\"text\"\r\n                            name=\"price\"\r\n                            className=\"form-control\"\r\n                            value={this.props.price}\r\n                            onChange={this.props.handleInputChange} />\r\n                    </div>\r\n                    <div className=\"col-sm-2 sm-2\">\r\n                        <label>UOM</label>\r\n                        <input type=\"text\"\r\n                            name=\"uom\"\r\n                            className=\"form-control\"\r\n                            onChange={this.props.handleInputChange}\r\n                            value={this.props.uom} />\r\n                    </div>\r\n                    <div className=\"col-sm-2 sm-2\">\r\n                        <label>Date</label>\r\n                        <input type=\"date\"\r\n                            name=\"dateCreated\"\r\n                            className=\"form-control\"\r\n                            onChange={this.props.handleInputChange}\r\n                            value={this.props.dateCreated}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <button className=\"btn btn-primary\"\r\n                    type=\"submit\">Submit form</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(\r\n    (state) => ({ products: state.product.handleInputChange }),\r\n    { saveProduct }\r\n)(ProductForm)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { fetchProducts, toggleProduct, deleteProduct, getVisibleProducts } from '../reducers/product'\r\n\r\n\r\n\r\n\r\nclass ProductList extends Component {\r\n\r\n    componentDidMount() {\r\n         this.props.fetchProducts()\r\n        // fetch('http://5d479f42992ea9001444c91f.mockapi.io/products')\r\n        // .then(res => res.json())\r\n        // .then((data) => {\r\n        //     this.setState({\r\n        //         products: data\r\n        //      })\r\n        // })\r\n        // .catch(console.log)\r\n\r\n    }\r\n\r\n    updateProductDetails = (id) =>{\r\n        console.log(id)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"table-responsive-sm\">\r\n                <table className=\"table\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th scope=\"col\">ID</th>\r\n                            <th scope=\"col\">Product Name</th>\r\n                            <th scope=\"col\">Price</th>\r\n                            <th scope=\"col\">UoM</th>\r\n                            <th scope=\"col\">Created Date</th>\r\n                            <th scope=\"col\">Item Status</th>\r\n                            <th scope=\"col\">Delete</th>\r\n                            <th scope=\"col\">Update</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.products.map(product => (\r\n                            <tr key={product.id}>\r\n                                <th scope=\"row\">{product.id}</th>\r\n                                <td>{product.productName}</td>\r\n                                <td>{product.price}</td>\r\n                                <td>{product.uom}</td>\r\n                                <td>{product.dateCreated}</td>\r\n                                <td><input type=\"checkbox\"\r\n                                    onChange={() => this.props.toggleProduct(product.id)}\r\n                                    checked={product.isActive} />\r\n                                </td>\r\n                                <td>\r\n                                    <span className=\"delete-item\">\r\n                                        <button onClick={() => this.props.deleteProduct(product.id)}>X</button>\r\n                                    </span>\r\n                                </td>\r\n                                <td>\r\n                                    <span className=\"delete-item\">\r\n                                        <button onClick={()=>this.updateProductDetails(product.id)}>Update</button>\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default connect(\r\n    (state, ownProps) => ({ products: getVisibleProducts(state.product.products, ownProps.filter) }),\r\n    { fetchProducts, toggleProduct, deleteProduct}\r\n)(ProductList)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Message = ({message}) => (\r\n    message\r\n        ? <span className='message'>{message}</span>\r\n        : null\r\n)\r\n\r\nexport default connect(\r\n    (state) => ({message: state.message})\r\n)(Message)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default (props) => (\r\n    <div>\r\n        <Link to='/'>All</Link>\r\n        <Link to='/active'>Active</Link>\r\n        <Link to='/completed'>Completed</Link>\r\n    </div>\r\n)","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport ProductForm from './Components/ProductForm'\nimport ProductList from './Components/ProductList';\nimport Message from './Components/Message'\nimport Footer from './Components/Footer'\n\n\n\nclass App extends Component {\n  state = {\n    products: []\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <Router>\n          <Message />\n          <ProductForm />\n          <Footer />\n          <Route path='/:filter?' render={({ match }) => (\n            <ProductList filter={match.params.filter}/>\n          )}>\n          </Route>\n        </Router>\n      </div>\n    )\n  }\n}\n\n\nexport default connect(\n  (state) => state\n)(App)\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\nimport productReducer from './reducers/product'\r\nimport messageReducer from './reducers/messages'\r\n\r\nconst reducer = combineReducers({\r\n    product:productReducer,\r\n    message:messageReducer \r\n})\r\n\r\nexport default createStore(\r\n    reducer,\r\n    composeWithDevTools(applyMiddleware(thunk))\r\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}